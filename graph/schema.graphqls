type Query {
  helloWorld: String
  getCurrentUser: User
  getUser(id: String!): PublicUser
}

type Mutation {
  createUser(input: CreateUser!): User
  editUser(input: EditUser!): User
  createMeasurement(input: MeasurementInput!): Measurement
}

type User {
  id: ID!
  name: String!
  provider: String
  email: String
  avi: String
  sex: String
  username: String
  type: String
  jwt: String
}

type PublicUser {
  id: ID!
  name: String!
  avi: String
  sex: String
  username: String
  currentMeasurement: Measurement
}

input CreateUser {
  token: String!
  email: String!
  name: String!
  provider: String!
  avi: String
  sex: String
  username: String
}

input EditUser {
  avi: String
  username: String
  type: String
}

type Measurement {
  id: ID!
  name: String
  measuredBy: String
  measurements: Map
  shoeSize: String
  active: Boolean
  createdAt: String
  metadata: Map
}

input MeasurementInput {
  name: String
  measuredBy: String
  measurements: Map
  shoeSize: String
  active: Boolean
}

scalar Map
