type Query {
  helloWorld: String
  getCurrentUser: User
  getUser(id: String!): PublicUser
  listMeasurements: [Measurement]!
}

type Mutation {
  createUser(input: CreateUser!): User
  editUser(input: EditUser!): User
  createMeasurement(input: MeasurementInput!): Measurement
  editMeasurement(data: EditMeasurementInput): Measurement
  deleteMeasurement(id: String): Boolean
  addWish(data: AddWishInput): Wish
  editWish(data: editUserWishInput): Wish
  deleteWish(id: String): Boolean
}

type User {
  id: ID!
  name: String!
  provider: String
  email: String
  avi: String
  sex: String
  username: String
  type: String
  jwt: String
  measurements: [Measurement]
}

type PublicUser {
  id: ID!
  name: String!
  avi: String
  sex: String
  username: String
  currentMeasurement: Measurement
}

input CreateUser {
  token: String!
  email: String!
  name: String!
  provider: String!
  avi: String
  sex: String
  username: String
}

input EditUser {
  avi: String
  username: String
  sex: String
  type: String
}

type Measurement {
  id: ID!
  name: String
  measuredBy: String
  measurements: Map
  shoeSize: String
  active: Boolean
  createdAt: String
  metadata: Map
}

input MeasurementInput {
  name: String
  measuredBy: String
  measurements: Map
  shoeSize: String
  active: Boolean
  type: String
}

input EditMeasurementInput {
  id: String
  name: String
  measuredBy: String
  measurements: Map
  shoeSize: String
  active: Boolean
  type: String
}

type Wish {
  id: ID!
  name: String!
  url: String!
  image: String
  description: String
  price: String
  userId: ID!
}

input AddWishInput {
  name: String!
  url: String
  image: String
  description: String
  price: String
}

input editUserWishInput {
  id: ID!
  name: String!
  url: String
  image: String
  description: String
  price: String
}

scalar Map
